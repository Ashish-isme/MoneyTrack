@page "/dashboard"

@inject MoneyTrack.Services.BalanceService BalanceService
@inject MoneyTrack.Services.ICreditService CreditService
@inject MoneyTrack.Services.IExpenseService ExpenseService
@inject MoneyTrack.Services.IDebtService DebtService
@inject MoneyTrack.Services.ITransactionService TransactionService
@inject MoneyTrack.Services.AuthenticationStateService AuthenticationStateService
@using MudBlazor

@using MoneyTrack.Models

@if (user != null)
{
        <div class="welcome-message">
            <h3>Hey @user.UserName, welcome to MoneyTrack!</h3>
        </div>

        <div class="dashboard-layout">
            <span class="current-balance">Balance: @currentBalance.ToString("C")</span>

            <div class="filters-section">
                <input type="date" @bind="startDate" class="filter-input" />
                <input type="date" @bind="endDate" class="filter-input" />
                <button @onclick="ApplyDateFilter" class="btn btn-primary btn-sm">Filter</button>
            </div>

            <!-- Summary Section with Graph beside Cards -->
            <div class="summary-section">
                <div class="summary-cards">
                    <MudCard Class="summary-card inflows-card">
                        <MudCardContent>
                            <h4>Total Inflow</h4>
                            <p>@totalInflows.ToString("C")</p>
                        </MudCardContent>
                    </MudCard>

                    <MudCard Class="summary-card outflows-card">
                        <MudCardContent>
                            <h4>Total Outflows</h4>
                            <p>@totalOutflows.ToString("C")</p>
                        </MudCardContent>
                    </MudCard>

                    <MudCard Class="summary-card debts-card">
                        <MudCardContent>
                            <h4>Total Debts</h4>
                            <p>@totalDebts.ToString("C")</p>
                        </MudCardContent>
                    </MudCard>
                </div>


            <div class="summary-cards">
                <MudCard Class="summary-card inflows-card">
                    <MudCardContent>
                        <h4>Total Transaction</h4>
                        <p>@totalTransaction.ToString("C")</p>
                    </MudCardContent>
                </MudCard>

                @* <MudCard Class="summary-card outflows-card">
                    <MudCardContent>
                        <h4>Cleared Debts</h4>
                        <p></p>
                    </MudCardContent>
                </MudCard> *@

    
            </div>


            

                <!-- Donut Chart Section -->
                <div class="chart-section">
                    <MudChart ChartType="ChartType.Donut" Width="220px" Height="220px" InputData="@chartData" InputLabels="@chartLabels">
                    </MudChart>
                </div>
            </div>

            <h4>Pending Debts</h4>
        @if (filteredPendingDebts != null && filteredPendingDebts.Count > 0)
        {
                    <table class="table table-striped table-sm">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Amount</th>
                                <th>Due Date</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                    @foreach (var debt in filteredPendingDebts)
                    {
                                    <tr>
                                        <td>@debt.Debttitle</td>
                                        <td>@debt.Debtamount.ToString("C")</td>
                                        <td>@debt.Debtdate.ToShortDateString()</td>
                                        <td>@(debt.Debtamount > 0 ? "Pending" : "Paid")</td>
                                    </tr>
                    }
                        </tbody>
                    </table>
        }
        else
        {
                    <p>No pending debts.</p>
        }

            <h4>Recent Transactions</h4>
        @if (filteredRecentTransactions != null && filteredRecentTransactions.Count > 0)
        {
                    <table class="table table-striped table-sm">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>
                                    Amount
                                    <button @onclick="SortByAmount" class="btn btn-link btn-sm">
                                @if (isAmountAscending)
                                {
                                                <i class="fa fa-arrow-up"></i>
                                }
                                else
                                {
                                                <i class="fa fa-arrow-down"></i>
                                }
                                    </button>
                                </th>
                                <th>
                                    Date
                                    <button @onclick="SortByDate" class="btn btn-link btn-sm">
                                @if (isDateAscending)
                                {
                                                <i class="fa fa-arrow-up"></i>
                                }
                                else
                                {
                                                <i class="fa fa-arrow-down"></i>
                                }
                                    </button>
                                </th>
                                <th>Type</th>
                                <th>Tags</th>
                                <th>Remarks</th>
                            </tr>
                        </thead>
                        <tbody>
                    @foreach (var transaction in filteredRecentTransactions.Take(5))
                    {
                                    <tr>
                                        <td>@transaction.transactiontitle</td>
                                        <td>@transaction.transactionamount.ToString("C")</td>
                                        <td>@transaction.transactiondate.ToShortDateString()</td>
                                        <td>@transaction.transactiontype</td>
                                        <td>@transaction.transactiontags</td>
                                        <td>@transaction.transactionremarks</td>
                                    </tr>
                    }
                        </tbody>
                    </table>
        }
        else
        {
                    <p>No recent transactions.</p>
        }
        </div>
}
else
{
        <div class="login-message">
            <h4>Please log in to view your dashboard.</h4>
        </div>
}

<style>
    .welcome-message h3 {
        font-size: 1.8rem;
        font-weight: 600;
        color: #273746;
        margin-bottom: 20px;
        margin-top: 60px;
    }

    .dashboard-layout {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .filters-section {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 20px;
    }

    .filter-input {
        width: 150px;
        font-size: 0.9rem;
    }

    .summary-section {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        flex-wrap: wrap;
    }

    .summary-cards {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        max-width: 250px;
    }

    .summary-card {
        padding: 0.8rem;
        border-radius: 8px;
        font-size: 0.8rem;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        height: 120px;
    }

    .inflows-card {
        background-color: #e6ffe6;
        border: 1px solid #4caf50;
        color: #2e7d32;
    }

    .outflows-card {
        background-color: #e6f7ff;
        border: 1px solid #2196f3;
        color: #1565c0;
    }

    .debts-card {
        background-color: #ffe6e6;
        border: 1px solid #f44336;
        color: #c62828;
    }

    .chart-section {
        flex-grow: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 20px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

        table th,
        table td {
            padding: 10px;
            text-align: left;
            border: 1px solid #ddd;
        }

    .btn-link {
        padding: 0;
        font-size: 0.8rem;
    }

    .login-message {
        text-align: center;
    }
</style>

@code {
    private MoneyTrack.Models.User? user;
    private float totalInflows;
    private float totalOutflows;
    private float totalDebts;
    private float totalTransaction = 0;
    private float currentBalance;
    private List<Debt> pendingDebts = new();
    private List<Transaction> recentTransactions = new();
    private List<Debt> filteredPendingDebts = new();
    private List<Transaction> filteredRecentTransactions = new();
    private bool isAmountAscending = true;
    private bool isDateAscending = true;
    private DateTime? startDate = null;
    private DateTime? endDate = null;
    private float totalClearedDebt = 0;

    private TakeDebt? takeDebtComponent;
   

    // Data for the Donut chart
    private double[] chartData = { 0, 0 }; // income and expense
    private string[] chartLabels = { "Income", "Expense" };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = AuthenticationStateService.GetAuthenticatedUser();
            if (user != null)
            {
                currentBalance = BalanceService.GetBalance(user.UserId);
                var credits = await CreditService.GetCreditsByUserIdAsync(user.UserId);
                totalInflows = credits.Sum(c => c.Creditamount);

                var expenses = await ExpenseService.GetExpensesByUserIdAsync(user.UserId);
                totalOutflows = expenses.Sum(e => e.Expenseamount);

                var debts = await DebtService.GetPendingDebtsAsync(user.UserId);
                pendingDebts = debts;
                totalDebts = debts.Sum(d => d.Debtamount);



                recentTransactions = TransactionService.GetTransactionsByUserId(user.UserId);

                ApplyDateFilter();

                // Update the chart data
                chartData = new double[] { totalInflows, totalOutflows };

                // totalClearedDebt = takeDebtComponent?.GetTotalClearedDebt() ?? 0;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing dashboard: {ex.Message}");
        }
    }



    private void ApplyDateFilter()
    {
        filteredPendingDebts = pendingDebts;
        filteredRecentTransactions = recentTransactions;

        if (startDate.HasValue && endDate.HasValue)
        {
            filteredPendingDebts = filteredPendingDebts
                .Where(d => d.Debtdate >= startDate.Value && d.Debtdate <= endDate.Value)
                .ToList();

            filteredRecentTransactions = filteredRecentTransactions
                .Where(t => t.transactiondate >= startDate.Value && t.transactiondate <= endDate.Value)
                .ToList();

            totalInflows = filteredRecentTransactions.Sum(t => t.transactiontype == "Credit" ? t.transactionamount : 0);
            totalOutflows = filteredRecentTransactions.Sum(t => t.transactiontype == "Debit" ? t.transactionamount : 0);
            totalDebts = filteredPendingDebts.Sum(d => d.Debtamount);
        }

        // Update the chart data after filtering
        chartData = new double[] { totalInflows, totalOutflows };

        CalculateTotalTransactions();
    }

    private void SortByAmount()
    {
        if (isAmountAscending)
        {
            filteredRecentTransactions = filteredRecentTransactions.OrderByDescending(t => t.transactionamount).ToList();
        }
        else
        {
            filteredRecentTransactions = filteredRecentTransactions.OrderBy(t => t.transactionamount).ToList();
        }
        isAmountAscending = !isAmountAscending;

        CalculateTotalTransactions();
    }

    private void SortByDate()
    {
        if (isDateAscending)
        {
            filteredRecentTransactions = filteredRecentTransactions.OrderByDescending(t => t.transactiondate).ToList();
        }
        else
        {
            filteredRecentTransactions = filteredRecentTransactions.OrderBy(t => t.transactiondate).ToList();
        }
        isDateAscending = !isDateAscending;

        CalculateTotalTransactions();
    }



    private void CalculateTotalTransactions()
    {
        totalTransaction = filteredRecentTransactions
            .Where(t => t.transactiontype == "Credit")
            .Sum(t => t.transactionamount)
            + filteredRecentTransactions
            .Where(t => t.transactiontype == "Debt")
            .Sum(t => t.transactionamount)
            - filteredRecentTransactions
            .Where(t => t.transactiontype == "Debit")
            .Sum(t => t.transactionamount);
    }
}