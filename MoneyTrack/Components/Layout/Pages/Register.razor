@page "/register"
@using MoneyTrack.Models
@using MoneyTrack.Services
@inject IUserService userService
@inject NavigationManager navigationManager

<section class="bg-light py-5 py-md-5" style="margin-top: 50px;">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-sm-10 col-md-8 col-lg-7 col-xl-6 col-xxl-5">
                <div class="card border border-light-subtle rounded-3 shadow-sm">
                    <div class="card-body p-3 p-md-4 p-xl-5">
                        <div class="text-center mb-3">
                            <a href="/">
                                <img src="./logo.svg" alt="BootstrapBrain Logo" width="175" height="57">
                            </a>
                        </div>
                        <h2 class="fs-6 fw-normal text-center text-secondary mb-4">Sign up for your account</h2>
                        <form>
                            <div class="row gy-2 overflow-hidden">
                                <!-- Username and Password fields in two columns -->
                                <div class="col-12 col-md-6">
                                    <div class="form-floating mb-3">
                                        <input type="text" class="form-control" id="username" @bind="newUser.UserName" placeholder="Enter your username" required style="width: 100%;">
                                        <label for="username" class="form-label">Username</label>
                                    </div>
                                </div>
                                <div class="col-12 col-md-6">
                                    <div class="form-floating mb-3">
                                        <input type="password" class="form-control" id="password" @bind="newUser.Password" placeholder="Enter your password" required style="width: 100%;">
                                        <label for="password" class="form-label">Password</label>
                                    </div>
                                </div>
                                <!-- Email and Name fields in two columns -->
                                <div class="col-12 col-md-6">
                                    <div class="form-floating mb-3">
                                        <input type="email" class="form-control" id="email" @bind="newUser.UserEmail" placeholder="Enter your email" required style="width: 100%;">
                                        <label for="email" class="form-label">Email</label>
                                    </div>
                                </div>
                                <div class="col-12 col-md-6">
                                    <div class="form-floating mb-3">
                                        <input type="text" class="form-control" id="name" @bind="newUser.User_Name" placeholder="Enter your full name" required style="width: 100%;">
                                        <label for="name" class="form-label">Full Name</label>
                                    </div>
                                </div>
                                <!-- Gender and Phone fields in two columns -->
                                <div class="col-12 col-md-6">
                                    <div class="form-floating mb-3">
                                        <select class="form-select" id="gender" @bind="newUser.UserGender" required style="width: 100%;">
                                            <option value="">Select your gender</option>
                                            <option value="Male">Male</option>
                                            <option value="Female">Female</option>
                                            <option value="Other">Other</option>
                                        </select>
                                        <label for="gender" class="form-label">Gender</label>
                                    </div>
                                </div>
                                <div class="col-12 col-md-6">
                                    <div class="form-floating mb-3">
                                        <input type="tel" class="form-control" id="phone" @bind="newUser.UserPhone" placeholder="Enter your phone number" required style="width: 100%;">
                                        <label for="phone" class="form-label">Phone</label>
                                    </div>
                                </div>
                                <!-- Submit button -->
                                <div class="col-12">
                                    <div class="d-grid my-3">
                                        <button type="button" class="btn btn-primary custom-btn btn-lg" @onclick="AddNewUser">Sign Up</button>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <p class="m-0 text-secondary text-center">
                                        Already registered?
                                        <a href="/" class="link-primary text-decoration-none">Login</a>
                                    </p>
                                </div>
                            </div>
                        </form>
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <p class="text-danger text-center mt-3">@errorMessage</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private User newUser = new User(); 
    private string errorMessage;

    private async Task AddNewUser()
    {
        try
        {
            var existingUsers = await userService.LoadUsersAsync();

            // Assign UserId based on the existing users
            newUser.UserId = existingUsers.Any() ? existingUsers.Max(u => u.UserId) + 1 : 1;

            if (existingUsers.Any(u => u.UserName.Equals(newUser.UserName, StringComparison.OrdinalIgnoreCase)))
            {
                errorMessage = "Username already exists.";
                return;
            }

            await userService.SaveUserAsync(newUser);
            newUser = new User();
            errorMessage = null;
            navigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while adding the user: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
}
