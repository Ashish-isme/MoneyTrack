@page "/add-expense"
@using MoneyTrack.Models
@using MoneyTrack.Services
@inject AuthenticationStateService authStateService
@inject IExpenseService expenseService
@inject BalanceService balanceService
@inject NavigationManager navigationManager

<h3 class="text-center font-weight-bold pt-4" style="margin-top: 40px;">Expense Management</h3>

@if (authStateService.IsAuthenticated())
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h6 class="current-balance">Your Current Balance: @currentBalance.ToString("C")</h6>
    </div>

    <form class="mt-3" style="max-width: 60%;">
        <div class="mb-3">
            <label for="expenseTitle" class="form-label">Expense Title:</label>
            <input type="text" id="expenseTitle" class="form-control form-control-sm" @bind="newExpense.Expensetitle" required />
        </div>

        <div class="d-flex justify-content-between gap-3">
            <div class="mb-3 flex-grow-1">
                <label for="expenseAmount" class="form-label">Amount:</label>
                <input type="number" id="expenseAmount" class="form-control form-control-sm" @bind="newExpense.Expenseamount" step="0.01" required />
            </div>
            <div class="mb-3 flex-grow-1">
                <label for="expenseDate" class="form-label">Expense Date:</label>
                <input type="date" id="expenseDate" class="form-control form-control-sm" @bind="newExpense.Expensedate" required />
            </div>
        </div>

        <div class="mb-3">
            <label for="expenseTags" class="form-label">Tags:</label>
            <select id="expenseTags" class="form-select form-select-sm" @bind="newExpense.Expensetags" required>
                <option value="" disabled selected>Others</option>
                <option value="Bill Sharing">Bill Sharing</option>
                <option value="Family Expense">Family Expense</option>
                <option value="Lend/Borrow">Lend/Borrow</option>
                <option value="Personal Use">Personal Use</option>
            </select>
        </div>

        <div class="mb-3">
            <label for="expenseRemarks" class="form-label">Remarks (Optional):</label>
            <textarea id="expenseRemarks" class="form-control form-control-sm" @bind="newExpense.Expenseremarks"></textarea>
        </div>

        <button type="button" class="btn btn-outline-success btn-sm w-30 mt-3" @onclick="Add_Expense">Add Expense</button>
    </form>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3">@successMessage</div>
    }
}
else
{
    navigationManager.NavigateTo("/");
}

@code {
    private Expense newExpense = new Expense();
    private string errorMessage;
    private string successMessage;
    private float currentBalance = 0;

    protected override async Task OnInitializedAsync()
    {
        newExpense.Expensedate = DateTime.Today;
        await LoadBalance();
    }

    private async Task LoadBalance()
    {
        var user = authStateService.GetAuthenticatedUser();
        if (user != null)
        {
            currentBalance = balanceService.GetBalance(user.UserId);
        }
    }

    private async Task Add_Expense()
    {
        var user = authStateService.GetAuthenticatedUser();
        if (user != null)
        {
            newExpense.UserId = user.UserId;

            try
            {
                await expenseService.AddExpenseAsync(newExpense);
                newExpense = new Expense { Expensedate = DateTime.Today };
                successMessage = "Expense added successfully!";
                errorMessage = null;
            }
            catch (InvalidOperationException ex)
            {
                errorMessage = ex.Message;
                successMessage = null;
            }
            catch (Exception ex)
            {
                errorMessage = $"Error adding expense: {ex.Message}";
                successMessage = null;
            }
        }
    }
}

<style>
    .current-balance {
        background-color: #28a745;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        font-weight: normal;
        margin-top: 20px;
        margin-bottom: 20px;
    }

    .btn-outline-success {
        border-color: #6c757d;
        color: #6c757d;
        font-size: 1rem;
        padding: 10px 20px;
        background-color: white;
    }

        .btn-outline-success:hover {
            background-color: #28a745;
            color: white;
            border-color: #28a745;
        }

    .form-control, .form-control-sm, .form-select {
        font-size: 0.85rem;
        padding: 8px;
        height: 38px;
    }
</style>