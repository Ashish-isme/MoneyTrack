@page "/"
@using MoneyTrack.Models
@using MoneyTrack.Services
@inject IUserService userService
@inject NavigationManager navigationManager
@inject AuthenticationStateService authStateService

<div class="d-flex justify-content-center align-items-center vh-100" style="background-color: #121212;">
    <div class="card p-4" style="width: 22rem; background-color: #1E1E1E; color: #ffffff; border: none; box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.3);">
        <h3 class="text-center mb-4">Login</h3>
        <form>
            <div class="mb-3">
                <label for="username" class="form-label">Username:</label>
                <input type="text" id="username" @bind="username" class="form-control" placeholder="Enter your username" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <input type="password" id="password" @bind="password" class="form-control" placeholder="Enter your password" />
            </div>
            <button type="button" class="btn btn-primary w-100" @onclick="LoginUser">Login</button>
        </form>
        <p class="text-center mt-3">
            Don't have an account?
            <a href="/register" class="text-primary">Sign Up</a>
        </p>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error-message text-danger text-center mt-2">@errorMessage</p>
        }
    </div>
</div>

@code {
    private string username;
    private string password;
    private string errorMessage;

    private async Task LoginUser()
    {
        try
        {
            var users = await userService.LoadUsersAsync();
            var user = users.FirstOrDefault(u => u.UserName == username && u.Password == HashPassword(password));

            if (user != null)
            {
                // Set the authenticated user in state management
                authStateService.SetAuthenticatedUser(user);

                // Redirect to the dashboard or todo page
                navigationManager.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred during login: {ex.Message}";
        }
    }

    private string HashPassword(string password)
    {
        using (var sha256 = System.Security.Cryptography.SHA256.Create())
        {
            var bytes = System.Text.Encoding.UTF8.GetBytes(password);
            var hash = sha256.ComputeHash(bytes);
            return Convert.ToBase64String(hash);
        }
    }
}
